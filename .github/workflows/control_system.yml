# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: control_system

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [ "main" ]
    paths:
        - "control_system/*"
        - ".github/workflows/control_system.yml"

defaults:
  run:
    working-directory: ./control_system/

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CMAKE_PREFIX_PATH: /opt/openrobots:/usr/local:$CMAKE_PREFIX_PATH
  PYTHONPATH: /usr/local/lib/python3.10/dist-packages:$PYTHONPATH
  LD_LIBRARY_PATH: /opt/openrobots/lib:$LD_LIBRARY_PATH

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Prepare Dependencies for control_system
      run: >
        sudo apt-get update && sudo apt-get install
        libeigen3-dev

    # CasADiは、C++版はソースビルドが必要（Python版はpipで入る）
    - name: Prepare Dependencies for casadi
      run: |
        sudo apt-get update && sudo apt-get install -y libeigen3-dev
        sudo apt install -y git cmake build-essential wget curl liblapack-dev libblas-dev pkg-config gfortran python3-pip

    # Zenn alumina_type10 氏による スクラップ記事をもとにキャッシュ機構を実装する
    # https://zenn.dev/link/comments/9b34b34878ea5f
    - name: casadi cache restore
      id: cache-casadi
      uses: actions/cache@v4
      env:
        cache-name: cache-casadi
      with:
        path: |
          control_system/casadi
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('control_system/casadi/package.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - if: ${{ steps.cache-casadi.outputs.cache-hit != 'true' }}
      name: Build casadi
      run: |
        git clone -b 3.6.5 https://github.com/casadi/casadi.git
        cd casadi
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_IPOPT=ON -DWITH_OSQP=ON -DWITH_BUILD_REQUIRED=ON
        make -j$(nproc)

    - name: Install casadi
      run: |
        cd casadi/build
        sudo make install
        pip3 install casadi

    - name: Prepare Dependencies for pinocchio
      run: |
        sudo apt install -qqy git libeigen3-dev libboost-all-dev liburdfdom-dev curl
        sudo sh -c "echo 'deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg' >> /etc/apt/sources.list.d/robotpkg.list"
        curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | sudo apt-key add -
        sudo apt-get update
        sudo apt install robotpkg-py310-eigenpy robotpkg-py310-casadi

    - name: pinocchio cache restore
      id: cache-pinocchio
      uses: actions/cache@v4
      env:
        cache-name: cache-pinocchio
      with:
        path: control_system/pinocchio
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('control_system/pinocchio/package.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    # Zenn alumina_type10 氏による スクラップ記事をもとにキャッシュ機構を実装する
    # https://zenn.dev/link/comments/9b34b34878ea5f
    - if: ${{ steps.cache-pinocchio.outputs.cache-hit != 'true' }}
      name: Build pinocchio
      run: |
        git clone --recursive https://github.com/stack-of-tasks/pinocchio
        cd pinocchio
        git checkout v3.0.0
        mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_DOCUMENTATION=OFF -DBUILD_TESTING=OFF -DPYTHON_EXECUTABLE=/usr/bin/python3 -DBUILD_WITH_CASADI_SUPPORT=ON
        make -j$(nproc)

    - name: Install pinocchio
      run: |
        cd pinocchio/build
        sudo make install

    - name: Build acados
      run: |
        git clone -b v0.3.2 https://github.com/acados/acados.git --recursive
        cd acados && mkdir build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DACADOS_WITH_OSQP=ON -DACADOS_WITH_QPOASES=ON -DACADOS_WITH_OPENMP=ON -DHPIPM_BLASFEO_LIB=ON
        make -j$(nproc)

    - name: Install acados
      run: |
        make install
        cd ..
        pip3 install -e interfaces/acados_template

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH
        cmake -S . -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        
